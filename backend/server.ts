import express, { Express, Request, Response } from 'express';
import cors from 'cors';
import axios from 'axios';
import fs from 'fs';
import path from 'path';

const app: Express = express();
const PORT = process.env.PORT || 3001;

const ALPHA_VANTAGE_API_KEY = '4QFTBYVKSVLIY9PR';

// Middleware
app.use(cors());
app.use(express.json());

// –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ NASDAQ-100 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
const NASDAQ_100_TICKERS = [
  "AAPL", "MSFT", "AMZN", "NVDA", "GOOGL", "GOOG", "META", "TSLA", "AVGO", "COST",
  "PEP", "ADBE", "CSCO", "TMUS", "CMCSA", "NFLX", "HON", "AMD", "TXN", "QCOM",
  "INTU", "AMGN", "INTC", "SBUX", "GILD", "MDLZ", "VRTX", "ADP", "ISRG", "REGN",
  "PANW", "PYPL", "AMAT", "LRCX", "BKNG", "MU", "SNPS", "CDNS", "KLAC", "MAR",
  "MELI", "CTAS", "CSX", "ASML", "CRWD", "ORLY", "MNST", "FTNT", "CHTR", "ADSK",
  "KDP", "KHC", "NXPI", "AEP", "PDD", "DXCM", "EXC", "MCHP", "XEL", "BIIB",
  "IDXX", "WDAY", "ROST", "ODFL", "PCAR", "LULU", "PAYX", "DLTR", "WBD", "CTSH",
  "FAST", "VRSK", "EA", "SGEN", "ANSS", "CPRT", "SIRI", "DDOG", "ALGN", "TEAM",
  "ZS", "BKR", "FANG", "CEG", "MTCH", "VRSN", "TTD", "OKTA", "GFS", "SWKS",
  "CDW", "MRNA", "SPLK", "ILMN", "AXON", "NTES", "JD", "LCID", "RIVN", "EBAY",
  "WBA", "VOD", "RYAAY", "UAL"
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏
const analyzeStock = async (ticker: string) => {
  try {
    console.log(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${ticker}...`);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const overviewUrl = `https://www.alphavantage.co/query?function=OVERVIEW&symbol=${ticker}&apikey=${ALPHA_VANTAGE_API_KEY}`;
    const overviewResponse = await axios.get(overviewUrl);
    const overview = overviewResponse.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏
    if (Object.keys(overview).length === 0 || overview.Note) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${ticker}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ª–∏–º–∏—Ç API`);
      return null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
    const quoteUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=${ALPHA_VANTAGE_API_KEY}`;
    const quoteResponse = await axios.get(quoteUrl);
    const quote = quoteResponse.data['Global Quote'];

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const balanceUrl = `https://www.alphavantage.co/query?function=BALANCE_SHEET&symbol=${ticker}&apikey=${ALPHA_VANTAGE_API_KEY}`;
    const balanceResponse = await axios.get(balanceUrl);
    const balance = balanceResponse.data.annualReports?.[0];

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    const flowUrl = `https://www.alphavantage.co/query?function=CASH_FLOW&symbol=${ticker}&apikey=${ALPHA_VANTAGE_API_KEY}`;
    const flowResponse = await axios.get(flowUrl);
    const flow = flowResponse.data.annualReports?.[0];

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ü–∏—é
    if (!balance || !flow || !quote) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${ticker}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö`);
      return null;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const eps = parseFloat(overview.DilutedEPSTTM) || 0;
    const bookValuePerShare = parseFloat(overview.BookValue) || 0;
    const currentPrice = parseFloat(quote['05. price']) || 0;
    const sharesOutstanding = parseFloat(overview.SharesOutstanding) || 0;

    // –ò–∑ –±–∞–ª–∞–Ω—Å–∞
    const totalDebt = parseFloat(balance.totalLiabilities) || 0;
    const totalEquity = parseFloat(balance.totalShareholderEquity) || 0;
    const currentAssets = parseFloat(balance.totalCurrentAssets) || 0;
    const currentLiab = parseFloat(balance.totalCurrentLiabilities) || 0;

    // –ò–∑ –æ—Ç—á–µ—Ç–∞ –æ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    const opCashFlow = parseFloat(flow.operatingCashflow) || 0;
    const capEx = Math.abs(parseFloat(flow.capitalExpenditures)) || 0;

    // –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    const debtToEquity = totalEquity !== 0 ? totalDebt / totalEquity : 0;
    const currentRatio = currentLiab !== 0 ? currentAssets / currentLiab : 0;
    const freeCashFlow = opCashFlow - capEx;
    const fcfPerShare = sharesOutstanding !== 0 ? freeCashFlow / sharesOutstanding : 0;
    const priceToFcfRatio = fcfPerShare !== 0 ? currentPrice / fcfPerShare : 0;

    // –†–∞—Å—á–µ—Ç —Ñ–æ—Ä–º—É–ª—ã –ì—Ä—ç—Ö–µ–º–∞ –∏ –º–∞—Ä–∂–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const grahamValue = Math.sqrt(22.5 * eps * bookValuePerShare) || 0;
    const marginOfSafety = grahamValue !== 0 ? ((grahamValue - currentPrice) / grahamValue) * 100 : 0;
    const isMarginSafe = marginOfSafety >= 25;

    // –°—Ç–∞–¥–∏—è 1: –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥
    const quickScreening = {
      passed: true,
      criteria: {
        marketCap: {
          value: parseFloat(overview.MarketCapitalization) || 0,
          passed: (parseFloat(overview.MarketCapitalization) || 0) > 2000000000
        },
        peRatio: {
          value: parseFloat(overview.PERatio) || 0,
          passed: (parseFloat(overview.PERatio) || 0) > 0 && (parseFloat(overview.PERatio) || 0) < 20
        },
        pbRatio: {
          value: parseFloat(overview.PriceToBookRatio) || 0,
          passed: (parseFloat(overview.PriceToBookRatio) || 0) < 2.5
        },
        roe: {
          value: (parseFloat(overview.ReturnOnEquityTTM) || 0) * 100,
          passed: (parseFloat(overview.ReturnOnEquityTTM) || 0) > 0.08
        }
      }
    };
    
    quickScreening.passed = Object.values(quickScreening.criteria).every(criterion => criterion.passed);

    // –°—Ç–∞–¥–∏—è 2: –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
    const financialHealth = {
      passed: true,
      criteria: {
        debtToEquity: {
          value: debtToEquity,
          passed: debtToEquity < 0.5
        },
        currentRatio: {
          value: currentRatio,
          passed: currentRatio > 1.5
        },
        priceToFcf: {
          value: priceToFcfRatio,
          passed: priceToFcfRatio < 20
        }
      }
    };
    
    financialHealth.passed = Object.values(financialHealth.criteria).every(criterion => criterion.passed);

    // –°—Ç–∞–¥–∏—è 3: –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const valuation = {
      passed: isMarginSafe,
      criteria: {
        grahamIntrinsicValue: grahamValue,
        currentPrice: currentPrice,
        marginOfSafety: marginOfSafety,
        marginOfSafetyRequired: 25,
        isMarginSafe: isMarginSafe
      }
    };

    // –û–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç
    const overallVerdict = quickScreening.passed && financialHealth.passed && valuation.passed;

    return {
      ticker,
      companyName: overview.Name || ticker,
      currentPrice,
      overallVerdict,
      stages: {
        quickScreening,
        financialHealth, 
        valuation
      },
      calculatedMetrics: {
        debtToEquity,
        currentRatio,
        freeCashFlow,
        fcfPerShare,
        priceToFcfRatio,
        eps,
        bookValuePerShare
      },
      lastUpdated: new Date().toISOString()
    };

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${ticker}:`, errorMessage);
    return null;
  }
};

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–π
app.get('/api/analyze-nasdaq100', async (req: Request, res: Response) => {
  try {
    const results: any[] = [];
    const failedTickers: string[] = [];

    for (let i = 0; i < NASDAQ_100_TICKERS.length; i++) {
      const ticker = NASDAQ_100_TICKERS[i];

      if (!ticker) continue;
      
      const result = await analyzeStock(ticker);
      
      if (result) {
        results.push(result);
        console.log(`‚úÖ ${ticker} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (${i + 1}/${NASDAQ_100_TICKERS.length})`);
      } else {
        failedTickers.push(ticker);
        console.log(`‚ùå ${ticker} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å`);
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ Alpha Vantage)
      if (i < NASDAQ_100_TICKERS.length - 1) {
        await delay(15000);
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const analysisResult = {
      analysisDate: new Date().toISOString(),
      totalAnalyzed: results.length,
      successRate: (results.length / NASDAQ_100_TICKERS.length) * 100,
      stocks: results,
      failedTickers: failedTickers,
      summary: {
        passedAllStages: results.filter(stock => stock.overallVerdict).length,
        passedQuickScreening: results.filter(stock => stock.stages.quickScreening.passed).length,
        passedFinancialHealth: results.filter(stock => stock.stages.financialHealth.passed).length,
        passedValuation: results.filter(stock => stock.stages.valuation.passed).length
      }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
    const filePath = path.join(__dirname, 'nasdaq100-analysis.json');
    fs.writeFileSync(filePath, JSON.stringify(analysisResult, null, 2), 'utf8');

    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ nasdaq100-analysis.json`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${analysisResult.summary.passedAllStages} –∏–∑ ${analysisResult.totalAnalyzed} –∞–∫—Ü–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º`);

    res.json({
      message: '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
      totalAnalyzed: analysisResult.totalAnalyzed,
      successRate: analysisResult.successRate.toFixed(2),
      filePath: filePath
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ:', error);
    res.status(500).json({ error: 'Failed to analyze stocks' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
app.get('/api/results', (req: Request, res: Response) => {
  try {
    const filePath = path.join(__dirname, 'nasdaq100-analysis.json');
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      res.json(JSON.parse(data));
    } else {
      res.status(404).json({ error: 'Results not found. Run analysis first.' });
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to read results' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
  console.log(`–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ: http://localhost:${PORT}/api/analyze-nasdaq100`);
  console.log(`–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: http://localhost:${PORT}/api/results`);
});